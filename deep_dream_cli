#!/usr/bin/env python3

"""CLI interface to deep_dream."""

import argparse
import sys

try:
    from IPython.core import ultratb
    sys.excepthook = ultratb.ColorTB()
except ImportError:
    pass
from PIL import Image

import deep_dream as dd


def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('in_file', type=str,
                        help='the input image')
    parser.add_argument('out_file', type=str, nargs='?', default='out.png',
                        help='the output image')
    parser.add_argument('--cpu-workers', type=int, default=0,
                        help='the number of CPU workers to start')
    parser.add_argument('--gpu', type=int, nargs='+', default=[],
                        help='the CUDA device IDs to use')
    parser.add_argument('--guide-image', type=str, default=None,
                        help='the guide image to use')
    parser.add_argument('--layer', type=str, nargs='+', default=[],
                        help='the network layers to target')
    parser.add_argument('--max-input-size', type=int, default=None,
                        help='rescale the input image to fit into this size')
    parser.add_argument('--max-tile-size', type=int, default=512,
                        help='the maximum dimension of a tile')
    parser.add_argument(
        '--min-size', type=int, default=128,
        help='don\'t use scales where the small edge of the image is below this')
        # TODO: allow custom models
        # TODO: dynamically fill models list
    parser.add_argument(
        '--model', type=str, default='GOOGLENET_BVLC',
        help='the model to use. valid values: '
        'GOOGLENET_BVLC, GOOGLENET_PLACES205, GOOGLENET_PLACES365, RESNET_50')
    parser.add_argument('--n', type=int, default=10,
                        help='the number of iterations per scale')
    parser.add_argument('--per-octave', type=int, default=2,
                        help='the number of scales per octave')
    parser.add_argument('--smoothing', type=float, default=0,
                        help='the per-iteration smoothing factor. try 0.02-0.1.')
    parser.add_argument('--step-size', type=float, default=1.5,
                        help='the strength of each iteration')
    parser.add_argument(
        '--tv-weight', type=float, default=None,
        help='the per-scale denoising weight. higher smooths the image less. try 25-200.')

    args = parser.parse_args()
    print('Parameters:')
    for arg in args._get_kwargs():
        print('    %s: %s' % arg)
    print()
    return args


def main():
    """The main function."""
    args = parse_args()
    model = getattr(dd, args.model.upper())
    assert model.__class__ == dd.CNNData
    assert args.cpu_workers >= 0
    cnn = dd.CNN(model, cpu_workers=args.cpu_workers, gpus=args.gpu)
    layers = []
    for expr in args.layer:
        try:
            layers.extend(cnn.layers(expr))
        except KeyError:
            layers = None
            break
    if not layers:
        print('List of valid layers:')
        for layer in cnn.layers():
            print('    ' + layer)
        sys.exit(1)

    in_img = Image.open(args.in_file)

    if args.max_input_size is not None:
        assert args.max_input_size >= 32
        w, h = in_img.size
        fac = 1
        if w > args.max_input_size:
            fac = args.max_input_size / w
        if h > args.max_input_size:
            fac = min(fac, args.max_input_size / h)
        w, h = round(w*fac), round(h*fac)
        in_img = in_img.resize((w, h), Image.LANCZOS)

    if args.guide_image is None:
        weights = cnn.prepare_layer_list(layers)
        print('Layer weights:')
        for weight in reversed(weights.items()):
            print('    %s: %g' % weight)
    else:
        guide_img = Image.open(args.guide_image)
        weights = cnn.prepare_guide_weights(guide_img, layers)
        print('Layers:')
        for layer in reversed(weights.keys()):
            print('    ', layer)
    print()

    print('Input image size: %dx%d' % in_img.size)
    print()

    img = cnn.dream(in_img, weights, max_tile_size=args.max_tile_size, min_size=args.min_size,
                    n=args.n, per_octave=args.per_octave, smoothing=args.smoothing,
                    step_size=args.step_size, tv_weight=args.tv_weight)

    save_args = {}
    out_type = args.out_file.rpartition('.')[2].lower()
    if out_type == 'jpg' or out_type == 'jpeg':
        save_args['quality'] = 95  # TODO: make configurable
    dd.to_image(img).save(args.out_file, **save_args)

if __name__ == '__main__':
    main()
